* Chapter 3
*** Sample app setup
    - Trying to specify the rails version gave me the following error;
      so I didn't specify a version, and everything seemed to work.
      ~/repos $ rails _4.2.2_ new sample
       /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/dependency.rb:315:in `to_specs': Could not find 'railties' (= 4.2.2) - did find: [railties-4.2.4,railties-4.2.3,railties-4.2.1,railties-4.1.4] (Gem::LoadError)
       Checked in 'GEM_PATH=/home/kwaku/.rvm/gems/ruby-2.2.1:/home/kwaku/.rvm/gems/ruby-2.2.1@global', execute `gem env` for more information
	from /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/dependency.rb:324:in `to_spec'
	from /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_gem.rb:64:in `gem'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/rails:22:in `<main>'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
    - The Gemfile retained the default version numbers generated by Rails.
      The idea is if there's a version snag later, fix it and report it.
*** Static Pages    
***** Generate controller                                             :c:
rails generate controller StaticPages home help
      create  app/controllers/static_pages_controller.rb
       route  get 'static_pages/help'
       route  get 'static_pages/home'
      invoke  erb
      create    app/views/static_pages
      create    app/views/static_pages/home.html.erb
      create    app/views/static_pages/help.html.erb
      invoke  test_unit
      create    test/controllers/static_pages_controller_test.rb
      invoke  helper
      create    app/helpers/static_pages_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/static_pages.coffee
      invoke    scss
      create      app/assets/stylesheets/static_pages.scss
***** controller name as CamelCase                               :c:ruby:
 creation of a controller file written in snake case
 Ruby uses CamelCase for class names
***** Undoing things                                              :rails:
rails generate --- rails destroy
rake db:migrate --- rake db: rollback
rake db:migrate VERSION=0
***** Custom static pages
*** Getting started wit Testing                                      :test:
***** Benefits of Testing
1. Protect against regressions: functioning code breaking
2. Allow for code re-factoring (change form without effecting function.)
3. Act as a client for the application code.
***** When to Test:
******* When test is simple compared to application code it tests, write the test first
******* When desired behavior isn't very clear, write application code first
******* Security model: err on side of writing tests.
******* Bug: when found, write test to reproduce it and protect against regressions, then fix it.
******* Careful about tests for code (such as HTML structure) likely to change in the future.
******* Write tests before re-factoring code, focusing on testing error-prone code that's especially likely to break.
******* Generally: write controller and model tests first, and integration tests (tests for functionality across model, views, and controllers) second.
***** Our first test
      #+NAME: test/controllers/static_pages_controller_test.rb
      #+BEGIN_SRC ruby
        require 'test_helper'

        class StaticPagesControllerTest < ActionController::TestCase

          test "should get home" do
            get :home
            assert_response :success
          end

          test "should get help" do
            get :help
            assert_response :success
          end
          
        end
      #+END_SRC
      RED
      #+NAME: app/controllers/static_pages_controler.rb
      #+BEGIN_SRC ruby
        class StaticPagesController < ApplicationController

          def home
          end

          def help
          end

          def about
          end
              
        end
      #+END_SRC
      touch app/veiws/static_pages/about.html
      GREEN
*** Slightly Dynamic Pages
    Have header template output correct title on the page.
***** mv app/views/layouts/application.html.erb layout_file  :v:static_pages:
      | Page  | URL                 | Base title  | Var     |
      | Home  | /static/pages_home  | "RoR T S A" | "Home"  |
      | Help  | /static_pages/help  | "RoR TSA"   | "Help"  |
      | About | /static_pages/about | "RoR TSA"   | "About" |
***** RED: Static Pages controller with title tests.                    :t:v:
      #+NAME: test/controllers/static_pages_controller_test.rb
      #+BEGIN_SRC ruby
require 'test_helper'

class StaticPagesControllerTest < ActionController::TestCase

  test "should get home" do
    get :home
    assert_response :success
    assert_select "title", "Home | Ruby on Rails Tutorial Sample App"
  end

  test "should get help" do
    get :help
    assert_response :success
    assert_select "title", "Help | Ruby on Rails Tutorial Sample App"
  end

  test "should get about" do
    get :about
    assert_response :success
    assert_select "title", "About | Ruby on Rails Tutorial Sample App"
  end
end

      #+END_SRC
***** GREEN: Adding page titles                                           :v:
      app/views/static_pages/home.html.erb
      <% provide(:title, "Home") %>
      app/views/layouts/application.html.erb
***** Setting the root route
      config/routes.rb
*** Advanced testing setup
***** minitest reporters
      #+NAME: test/test_helper.rb
      #+BEGIN_SRC ruby
        ENV['RAILS_ENV'] ||= 'test'
        require File.expand_path('../../config/environment', __FILE__)
        require 'rails/test_help'
        require 'minitest/reporters'
        Minitest::Reporters.use!

        class ActiveSupport::TestCase
          # Setup all fixtures in test/fixtures/*.yml for all tests in
          # alphabetical order.
          fixtures :all

          #Add more helper methods used by all tests here...
          end
      #+END_SRC
***** Backtrace silencer
      #+NAME: config/initializers/backtrace_silencers.rb
      #+BEGIN_SRC 
        # Be sure to restart your server when you modify this file.

        # You can add backtrace silencers for libraries that you're using but don't wish to see in your backtracks.
        # Rails.backtrace_cleaner.add_silencer { |line| line =~ /my_noisy_library/ }
        Rails.backtrace_cleaner.add_silencer { |line| line =~ /rvm/ }

        # You can also remove all the silencers if you're trying to debug a problem that might stem from framework code.
        # Rails.backtrace_cleaner.remove_silencers!
      #+END_SRC
***** Limit backtrace in irb:
      context.back_trace_limit=(3)
***** Automated tests with Guard                                          :t:
******* bundle exec guard init
16:09:10 - INFO - Writing new Guardfile to /home/kwaku/repos/sample_app/Guardfile
16:09:10 - INFO - minitest guard added to Guardfile, feel free to edit it
******* Edit the Guardfile
        #+NAME: Guadfile
        #+BEGIN_SRC ruby
                  # Defines the matching rules for Guard.
          guard :minitest, spring: true, all_on_start: false do
            watch(%r{^test/(.*)/?(.*)_test\.rb$})
            watch('test/test_helper.rb') { 'test' }
            watch('config/routes.rb')    { integration_tests }
            watch(%r{^app/models/(.*?)\.rb$}) do |matches|
              "test/models/#{matches[1]}_test.rb"
            end
            watch(%r{^app/controllers/(.*?)_controller\.rb$}) do |matches|
              resource_tests(matches[1])
            end
            watch(%r{^app/views/([^/]*?)/.*\.html\.erb$}) do |matches|
              ["test/controllers/#{matches[1]}_controller_test.rb"] +
              integration_tests(matches[1])
            end
            watch(%r{^app/helpers/(.*?)_helper\.rb$}) do |matches|
              integration_tests(matches[1])
            end
            watch('app/views/layouts/application.html.erb') do
              'test/integration/site_layout_test.rb'
            end
            watch('app/helpers/sessions_helper.rb') do
              integration_tests << 'test/helpers/sessions_helper_test.rb'
            end
            watch('app/controllers/sessions_controller.rb') do
              ['test/controllers/sessions_controller_test.rb',
               'test/integration/users_login_test.rb']
            end
            watch('app/controllers/account_activations_controller.rb') do
              'test/integration/users_signup_test.rb'
            end
            watch(%r{app/views/users/*}) do
              resource_tests('users') +
              ['test/integration/microposts_interface_test.rb']
            end
          end

          # Returns the integration tests corresponding to the given resource.
          def integration_tests(resource = :all)
            if resource == :all
              Dir["test/integration/*"]
            else
              Dir["test/integration/#{resource}_*.rb"]
            end
          end

          # Returns the controller tests corresponding to the given resource.
          def controller_test(resource)
            "test/controllers/#{resource}_controller_test.rb"
          end

          # Returns all tests for the given resource.
          def resource_tests(resource)
            integration_tests(resource) << controller_test(resource)
          end
        #+END_SRC
******* Add spring/#.pid to .gitignore
* Chapter 4 Rails-flavored Ruby
*** Helpers                                                         :helpers:
    - provide functions not included in Rails
***** full_title                                                  :helpers:v:
      #+NAME: app/helpers/application_helper.rb
      #+BEGIN_SRC ruby
          module ApplicationHelper

          #Returns the full title on a per-page basis.
          def full_title(page_title = '')

            base_title = "Ruby on Rails Tutorial Sample App"
            if page_title.empty?
              base_title
            else
              page_title + " | " + base_title
            end
            
          end

          
        end
      #+END_SRC
***** <title><%= full_title(yield(:title)) %></title>
***  %w[A B C].map(&:downcase)
     == %w[A B C].map { |char| char.downcase }
*** p :name # Same output as 'puts :name.inspect'
    inspect method: returns a string with a literal 
    representation of the object it’s called on
*** 4.4 Ruby Classes
***** 4.4.5 A user class
******* code for example user
        #+NAME: example_user.rb
        #+BEGIN_SRC ruby
class User
  attr_accessory :name, :email

  def initialize(attributes = {})
    @name  = attributes[:name]
    @email = attributes[:email]
  end

  def formatted_email
    "#{@name} <#{@email}>"
  end
end        
        #+END_SRC
*** The word “deified” is a palindrome.


* Chapter 5 Filling in the layout.
  - Incorporate CSS framework into application
  - Add custom stylesheets, links to layout
  - Concepts:
    - partials
    - Rails routes
    - Asset pipeline
    - Sass
  - Integration test
*** Adding some structure                                                 :v:
    - Mockups: aka wireframes; rough sketches of what the eventual
      application will look like.
    - 
***** Site navigation
      #+NAME: app/views/layouts/application.html.erb
      #+BEGIN_SRC ruby
              <!DOCTYPE html>
        <html>
            <head>
                <title><%= full_title(yield(:title)) %></title>
                <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
                <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
                <%= csrf_meta_tags %>
                <!--[if lt IE 9]>
                <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/r29/html5.min.js">
                </script>
                <![endif]-->
            </head>

            <body>
                
                <header class="navbar navbar-fixed-top navbar-inverse">
                    <div class="container">
                        <%= link_to "sample app", '#', id: "logo" %>
                        <nav>
                            <ul class="nav navbar navbar-right">
                                <li><%=link_to "Home", '#' %></li>
                                <li><%=link_to "Help", '#' %></li>
                                <li><%=link_to "Log in", '#' %></li>
                            </ul>
                        </nav>
                    </div>
                </header>
                
                <div class="container">
                    <%= yield %>
                </div>
                
            </body>
        </html>
      #+END_SRC

***** [[https://github.com/aFarkas/html5shiv][HTML5 Shiv]]                                                          :v:
       enables use of HTML5 sectioning elements in legacy Internet
       Explorer and provides basic HTML5 styling for Internet Explorer
       6-9, Safari 4.x (and iPhone 3.x), and Firefox 3.x.

***** Add Bootstrap to Rails                                      :Gemfile:v:
      gem 'bootstrap-sass'

***** Create a custom CSS file
      touch app/stylesheets/custom.css.scss
      
***** Partials:
      - live in app/assets/layouts
      - start with an underscore
      - <%= render 'layouts/footer' %>
        - renders app/assets/layouts/_footer.html.erb
*** Sass and the asset pipeline.
***** Manifest files                                                      :v:
      tell Rails (via the Sprockets gem) how to combine them to form
      single files. (This applies to CSS and JavaScript but not to
      images.)
***** The manifest file for app-specific CSS:
      #+NAME: app/assets/stylesheets/application.css
      #+BEGIN_SRC css
              /*
         .
         .
         .
         ,*= require_tree .
         ,*= require_self
        */
      #+END_SRC
      - *= require_tree .  ensures that all CSS files in the
        app/assets/stylesheets directory (including the tree
        subdirectories) are included into the application CSS.
      - *= require_self specifies where in the loading sequence the
        CSS in application.css itself gets included.
*****  Preprocessor engines
       .scss sass; .coffee CoffeeScript .erb Embeded Ruby Can be
       chained: foobar.js.erb.coffee runs through coffee than ERB
***** Asset Pipelines: Know them, love them.
***** Syntactically awesome stylesheets
******* Nesting
        Replace
        #+BEGIN_SRC css
          .center {
              text-align: center;
          }

          .center h1 {
              margin-bottom: 10px;
          }

          /* With */

          .center {
              text-align: center;

              h1 {
                  margin-bottom 10px;
              }
          }

          /* CSS: */
          #logo{
              float: left;
              blah: link;
          }

          #logo:hover {
              color: #fff;
          }

          /* Sass */
          #logo {
              float: left;
              blah: link;
              &:hover {
                  color: #fff;
              }
          }
        #+END_SRC

******* Variables
        - $light-grey: #777;
        - [[http://getbootstrap.com/customize/#less-variables][Bootstrap page of Less Variables]]
          pulled in by bootstrap-sass gem
        
******* 5.15 Initial CSS file Sissified 
        #+NAME: app/assets/stylesheets/custom.css.scss
        #+BEGIN_SRC css
                @import "bootstrap-sprockets";
          @import "bootstrap";


          /* Last Modified: Listing 5.15 */
          /* L5.15: mixins, variables, etc. */
          $gray-medium-light: #eaeaea;


          /* universal */
          /* Listing 5.5 */

          body {
            padding-top: 60px;
          }

          section {
            overflow: auto;
          }

          textarea {
            resize: vertical;
          }

          /*mod L5.15*/
          .center {
            text-align: center;
            h1 {
                margin-bottom: 10px;
            }
          }


          /* typography */
          /* Listing 5.6 */
          h1, h2, h3, h4, h5, h6 {
            line-height: 1;
          }

          h1 {
            font-size: 3em;
            letter-spacing: -2px;
            margin-bottom: 30px;
            text-align: center;
          }

          h2 {
            font-size: 1.2em;
            letter-spacing: -1px;
            margin-bottom: 30px;
            text-align: center;
            font-weight: normal;
            color: $gray-light;
          }

          p {
            font-size: 1.1em;
            line-height: 1.7em;
          }

          /* header */
          /* Listing 5.7 */
          /*mod L5.15*/
          #logo {
            float: left;
            margin-right: 10px;
            font-size: 1.7em;
            color: white;
            text-transform: uppercase;
            letter-spacing: -1px;
            padding-top: 9px;
            font-weight: bold;
            &:hover {
                color: white;
                text-decoration: none;
            }
          }



          /* footer */
          /* Also Chapter 5 */
          /*mod L5.15*/
          footer {
              margin-top: 45px;
              padding-top: 5px;
              border-top: 1p solid $gray-medium-light;
              color: $gray-light;
              a {
                  color: #555;
                  &:hover {
                      color: #222;
                  }
              }

              small {
                  float: left;
              }

              ul {
                  float: right;
                  list-style: none;
                  li {
                      float: left;
                      margin-left: 15px;
                  }
              }
          }
        #+END_SOC

*** Layout links                                                        :v:c:

***** Contact Page: see git branch for Ex. 3?

***** Using named routes
      <%= link_to "About", about_path %>
******* Change
        - app/view/layouts/_header.html.erb
***** Layout Link tests
      -Integration test: end-to-end test of behavior
******* rails generate integration_test site_layout                   :t:v:c:
        invoke  test_unit
        create    test/integration/site_layout_test.rb

*** User sign up: A first step. 

*** User signup: a first step

***** Users controller                                                    :c:
      - rails generate controller Users new
        - create  app/controllers/users_controller.rb
          route  get 'users/new'
          invoke  erb
          create    app/views/users
          create    app/views/users/new.html.erb
          invoke  test_unit
          create    test/controllers/users_controller_test.rb
          invoke  helper
          create    app/helpers/users_helper.rb
          invoke    test_unit
          invoke  assets
          invoke    coffee
          create      app/assets/javascripts/users.coffee
          invoke    scss
          create      app/assets/stylesheets/users.scss
      - Test should pass
        
      
***** Linking the button to the signup page.
      <%= link_to "Sign up now!", signup_path, class: "btn btn-lg btn-primary" %>

***** new.html.erb                                                        :v:
      <% provide(:title, 'Sign up') %>

*** Exercises

***** 2: Verify page title correct on sign up page             :diff:t:v:
I put this test in 
#+NAME: users_controller_test.rb
#+BEGIN_SRC ruby
    test "should get signup" do
      get :signup
      assert_response :success
      assert_select "title", "Sign up | Ruby on Rails Turorial Sample App"
#+END_SRC
Remember: the ":new" refers to the controller method, not the URL routed,
"GET" is not the HTTP verb here.

* Chapter 6 Modeling Users

*** Database Migrations

***** Create Users model                                                  :m:
      rails generate model User name:string email:string
      bundle exec rails g  model User name:string email:string
      invoke  active_record
      create    db/migrate/20151213150510_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/models/user_test.rb
      create      test/fixtures/users.yml

******* Migrating:
        This is Rinari! M-x rinari-rake db:migrate
        -*- mode: ruby-compilation; default-directory: "~/repos/sample_app/" -*-
        RubyComp started at Sun Dec 13 08:18:44

        rake db\:migrate
        == 20151213150510 CreateUsers: migrating ==========================
        -- create_table(:users)
        -> 0.0015s
        == 20151213150510 CreateUsers: migrated (0.0015s) =================


        RubyComp finished at Sun Dec 13 08:18:47


******* Magic Columns                                         :m:magic:
        class CreateUsers <ActiveRecord::Migration
        def change
        create_table :users do |t|
        t.timestamps null: false 
        end end end
        This sets up two tables: created at and updated at
        
******* id column                                             :m:magic:
        Automagically created by Rails, identifies each row uniquely
        
******* Reverting:                                               :m:qv:
        most migrations are reversible:
        bundle exec rake db:rollback or
        bundle exec rake db:migrate VERSION=0
        (make a sequential list of migrations to make sure
        you're rolling back to the right one.

***** The model file lives in /app/models/user.rb

***** Creating user objects

******* user = User.new(name: "me", email: "myself")               :qv:
        Has .valid? method, inherited from ActiveRecord
        - user.save : puts it into database (sandbox mode!)
        - User.fifth works, but not User.sixth or User.find(-1)
        - .update_attributes .save and .reload are handy
*** User validations                                         :m:validation:
    Enforce constraints on their values
    - presence
    - length
    - format
    - uniqueness
***** Validations are added to the model's class definition
      using the validate method.
     #+NAME: app/models/user.rb
     #+BEGIN_SRC ruby
      class User < ActiveRecord::Base
        validates :name, presence: true
      end
     #+END_SRC
***** Testing for Validity of Email address
      - First add test to make sure validation accepts
        valid addresses: should be green
      - Then add tests for invalidity of various email addresses
***** Uniqueness Validation
