* Chapter 3
*** Sample app setup
    - Trying to specify the rails version gave me the following error;
      so I didn't specify a version, and everything seemed to work.
      ~/repos $ rails _4.2.2_ new sample
       /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/dependency.rb:315:in `to_specs': Could not find 'railties' (= 4.2.2) - did find: [railties-4.2.4,railties-4.2.3,railties-4.2.1,railties-4.1.4] (Gem::LoadError)
       Checked in 'GEM_PATH=/home/kwaku/.rvm/gems/ruby-2.2.1:/home/kwaku/.rvm/gems/ruby-2.2.1@global', execute `gem env` for more information
	from /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/dependency.rb:324:in `to_spec'
	from /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_gem.rb:64:in `gem'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/rails:22:in `<main>'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
    - The Gemfile retained the default version numbers generated by Rails.
      The idea is if there's a version snag later, fix it and report it.
*** Static Pages    
***** Generate controller                                             :c:
rails generate controller StaticPages home help
      create  app/controllers/static_pages_controller.rb
       route  get 'static_pages/help'
       route  get 'static_pages/home'
      invoke  erb
      create    app/views/static_pages
      create    app/views/static_pages/home.html.erb
      create    app/views/static_pages/help.html.erb
      invoke  test_unit
      create    test/controllers/static_pages_controller_test.rb
      invoke  helper
      create    app/helpers/static_pages_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/static_pages.coffee
      invoke    scss
      create      app/assets/stylesheets/static_pages.scss
***** controller name as CamelCase                               :c:ruby:
 creation of a controller file written in snake case
 Ruby uses CamelCase for class names
***** Undoing things                                              :rails:
rails generate --- rails destroy
rake db:migrate --- rake db: rollback
rake db:migrate VERSION=0
***** Custom static pages
*** Getting started wit Testing                                      :test:
***** Benefits of Testing
1. Protect against regressions: functioning code breaking
2. Allow for code re-factoring (change form without effecting function.)
3. Act as a client for the application code.
***** When to Test:
******* When test is simple compared to application code it tests, write the test first
******* When desired behavior isn't very clear, write application code first
******* Security model: err on side of writing tests.
******* Bug: when found, write test to reproduce it and protect against regressions, then fix it.
******* Careful about tests for code (such as HTML structure) likely to change in the future.
******* Write tests before re-factoring code, focusing on testing error-prone code that's especially likely to break.
******* Generally: write controller and model tests first, and integration tests (tests for functionality across model, views, and controllers) second.
***** Our first test
      #+NAME: test/controllers/static_pages_controller_test.rb
      #+BEGIN_SRC ruby
        require 'test_helper'

        class StaticPagesControllerTest < ActionController::TestCase

          test "should get home" do
            get :home
            assert_response :success
          end

          test "should get help" do
            get :help
            assert_response :success
          end
          
        end
      #+END_SRC
      RED
      #+NAME: app/controllers/static_pages_controler.rb
      #+BEGIN_SRC ruby
        class StaticPagesController < ApplicationController

          def home
          end

          def help
          end

          def about
          end
              
        end
      #+END_SRC
      touch app/veiws/static_pages/about.html
      GREEN
*** Slightly Dynamic Pages
    Have header template output correct title on the page.
***** mv app/views/layouts/application.html.erb layout_file  :v:static_pages:
      | Page  | URL                 | Base title  | Var     |
      | Home  | /static/pages_home  | "RoR T S A" | "Home"  |
      | Help  | /static_pages/help  | "RoR TSA"   | "Help"  |
      | About | /static_pages/about | "RoR TSA"   | "About" |
***** RED: Static Pages controller with title tests.                    :t:v:
      #+NAME: test/controllers/static_pages_controller_test.rb
      #+BEGIN_SRC ruby
require 'test_helper'

class StaticPagesControllerTest < ActionController::TestCase

  test "should get home" do
    get :home
    assert_response :success
    assert_select "title", "Home | Ruby on Rails Tutorial Sample App"
  end

  test "should get help" do
    get :help
    assert_response :success
    assert_select "title", "Help | Ruby on Rails Tutorial Sample App"
  end

  test "should get about" do
    get :about
    assert_response :success
    assert_select "title", "About | Ruby on Rails Tutorial Sample App"
  end
end

      #+END_SRC
***** GREEN: Adding page titles                                           :v:
      app/views/static_pages/home.html.erb
      <% provide(:title, "Home") %>
      app/views/layouts/application.html.erb
***** Setting the root route
      #+NAME: config/routes.rb
      #+BEGIN_SRC ruby
Rails.application.routes.draw do

  root'static_pages#home'
  get 'help'  => 'static_pages#help'
  get 'about' =>'static_pages#about'

end
      #+END_SRC
***** Exercises
      [[https://twitter.com/Rzhevsky/status/667751968450871296][Branched off main]] instead of static-pages
      
******* Add "setup" function to static pages test                       :t:v:
        #+NAME: test/controllers/static_pages_controller_test.rb
        #+BEGIN_SRC ruby
  def setup
    @base_title = "Ruby on Rails Tutorial Sample App"
  end

test "should get home" do
    get :home
    assert_response :success
    assert_select "title", "Home | #{@base_title}"
  end
        
        #+END_SRC

******* Make "Contact Page"

********* Write test RED                                                  :t:
          #+NAME: test/controllers/static_pages_controller_test.rb
          #+BEGIN_SRC ruby
            test "should get contact page" do
              get :contact
              assert_response :success
              assert_select "title", "Contact | #{@base_title}"
            end
          #+END_SRC

********* Edit routes
          #+NAME: config/routes.rb
          #+BEGIN_SRC ruby
            get 'contact' => 'static_pages#contact'
          #+END_SRC

********* Edit controller                                                 :c:
          def contact
          end

********* create template                                                 :v:
          touch app/views/static_pages/contact.html.erb 

********* let template provide title GREEN
          <% provide(:title, "Contact") %>

***** Advanced testing setup                                              :t:

******* minitest reporters
