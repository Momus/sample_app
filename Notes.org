* Chapter 3
*** Sample app setup
    - Trying to specify the rails version gave me the following error;
      so I didn't specify a version, and everything seemed to work.
      ~/repos $ rails _4.2.2_ new sample
       /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/dependency.rb:315:in `to_specs': Could not find 'railties' (= 4.2.2) - did find: [railties-4.2.4,railties-4.2.3,railties-4.2.1,railties-4.1.4] (Gem::LoadError)
       Checked in 'GEM_PATH=/home/kwaku/.rvm/gems/ruby-2.2.1:/home/kwaku/.rvm/gems/ruby-2.2.1@global', execute `gem env` for more information
	from /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/dependency.rb:324:in `to_spec'
	from /home/kwaku/.rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_gem.rb:64:in `gem'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/rails:22:in `<main>'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `eval'
	from /home/kwaku/.rvm/gems/ruby-2.2.1/bin/ruby_executable_hooks:15:in `<main>'
    - The Gemfile retained the default version numbers generated by Rails.
      The idea is if there's a version snag later, fix it and report it.
*** Static Pages    
***** Generate controller                                             :c:
rails generate controller StaticPages home help
      create  app/controllers/static_pages_controller.rb
       route  get 'static_pages/help'
       route  get 'static_pages/home'
      invoke  erb
      create    app/views/static_pages
      create    app/views/static_pages/home.html.erb
      create    app/views/static_pages/help.html.erb
      invoke  test_unit
      create    test/controllers/static_pages_controller_test.rb
      invoke  helper
      create    app/helpers/static_pages_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/static_pages.coffee
      invoke    scss
      create      app/assets/stylesheets/static_pages.scss
***** controller name as CamelCase                               :c:ruby:
 creation of a controller file written in snake case
 Ruby uses CamelCase for class names
***** Undoing things                                              :rails:
rails generate --- rails destroy
rake db:migrate --- rake db: rollback
rake db:migrate VERSION=0
***** Custom static pages
*** Getting started wit Testing                                      :test:
***** Benefits of Testing
1. Protect against regressions: functioning code breaking
2. Allow for code re-factoring (change form without effecting function.)
3. Act as a client for the application code.
***** When to Test:
******* When test is simple compared to application code it tests, write the test first
******* When desired behavior isn't very clear, write application code first
******* Security model: err on side of writing tests.
******* Bug: when found, write test to reproduce it and protect against regressions, then fix it.
******* Careful about tests for code (such as HTML structure) likely to change in the future.
******* Write tests before re-factoring code, focusing on testing error-prone code that's especially likely to break.
******* Generally: write controller and model tests first, and integration tests (tests for functionality across model, views, and controllers) second.
***** Our first test
      #+NAME: test/controllers/static_pages_controller_test.rb
      #+BEGIN_SRC ruby
        require 'test_helper'

        class StaticPagesControllerTest < ActionController::TestCase

          test "should get home" do
            get :home
            assert_response :success
          end

          test "should get help" do
            get :help
            assert_response :success
          end
          
        end
      #+END_SRC
      RED
      #+NAME: app/controllers/static_pages_controler.rb
      #+BEGIN_SRC ruby
        class StaticPagesController < ApplicationController

          def home
          end

          def help
          end

          def about
          end
              
        end
      #+END_SRC
      touch app/veiws/static_pages/about.html
      GREEN
*** Slightly Dynamic Pages
    Have header template output correct title on the page.
***** mv app/views/layouts/application.html.erb layout_file  :v:static_pages:
      | Page  | URL                 | Base title  | Var     |
      | Home  | /static/pages_home  | "RoR T S A" | "Home"  |
      | Help  | /static_pages/help  | "RoR TSA"   | "Help"  |
      | About | /static_pages/about | "RoR TSA"   | "About" |
***** RED: Static Pages controller with title tests.                    :t:v:
      #+NAME: test/controllers/static_pages_controller_test.rb
      #+BEGIN_SRC ruby
require 'test_helper'

class StaticPagesControllerTest < ActionController::TestCase

  test "should get home" do
    get :home
    assert_response :success
    assert_select "title", "Home | Ruby on Rails Tutorial Sample App"
  end

  test "should get help" do
    get :help
    assert_response :success
    assert_select "title", "Help | Ruby on Rails Tutorial Sample App"
  end

  test "should get about" do
    get :about
    assert_response :success
    assert_select "title", "About | Ruby on Rails Tutorial Sample App"
  end
end

      #+END_SRC
***** GREEN: Adding page titles                                           :v:
      app/views/static_pages/home.html.erb
      <% provide(:title, "Home") %>
      app/views/layouts/application.html.erb
***** Setting the root route
      config/routes.rb
*** Advanced testing setup
***** minitest reporters
      #+NAME: test/test_helper.rb
      #+BEGIN_SRC ruby
        ENV['RAILS_ENV'] ||= 'test'
        require File.expand_path('../../config/environment', __FILE__)
        require 'rails/test_help'
        require 'minitest/reporters'
        Minitest::Reporters.use!

        class ActiveSupport::TestCase
          # Setup all fixtures in test/fixtures/*.yml for all tests in
          # alphabetical order.
          fixtures :all

          #Add more helper methods used by all tests here...
          end
      #+END_SRC
***** Backtrace silencer
      #+NAME: config/initializers/backtrace_silencers.rb
      #+BEGIN_SRC 
        # Be sure to restart your server when you modify this file.

        # You can add backtrace silencers for libraries that you're using but don't wish to see in your backtraces.
        # Rails.backtrace_cleaner.add_silencer { |line| line =~ /my_noisy_library/ }
        Rails.backtrace_cleaner.add_silencer { |line| line =~ /rvm/ }

        # You can also remove all the silencers if you're trying to debug a problem that might stem from framework code.
        # Rails.backtrace_cleaner.remove_silencers!
      #+END_SRC
***** Automated tests with Guard                                          :t:
******* bundle exec guard init
16:09:10 - INFO - Writing new Guardfile to /home/kwaku/repos/sample_app/Guardfile
16:09:10 - INFO - minitest guard added to Guardfile, feel free to edit it
******* Edit the Guardfile
        #+NAME: Guadfile
        #+BEGIN_SRC ruby
                  # Defines the matching rules for Guard.
          guard :minitest, spring: true, all_on_start: false do
            watch(%r{^test/(.*)/?(.*)_test\.rb$})
            watch('test/test_helper.rb') { 'test' }
            watch('config/routes.rb')    { integration_tests }
            watch(%r{^app/models/(.*?)\.rb$}) do |matches|
              "test/models/#{matches[1]}_test.rb"
            end
            watch(%r{^app/controllers/(.*?)_controller\.rb$}) do |matches|
              resource_tests(matches[1])
            end
            watch(%r{^app/views/([^/]*?)/.*\.html\.erb$}) do |matches|
              ["test/controllers/#{matches[1]}_controller_test.rb"] +
              integration_tests(matches[1])
            end
            watch(%r{^app/helpers/(.*?)_helper\.rb$}) do |matches|
              integration_tests(matches[1])
            end
            watch('app/views/layouts/application.html.erb') do
              'test/integration/site_layout_test.rb'
            end
            watch('app/helpers/sessions_helper.rb') do
              integration_tests << 'test/helpers/sessions_helper_test.rb'
            end
            watch('app/controllers/sessions_controller.rb') do
              ['test/controllers/sessions_controller_test.rb',
               'test/integration/users_login_test.rb']
            end
            watch('app/controllers/account_activations_controller.rb') do
              'test/integration/users_signup_test.rb'
            end
            watch(%r{app/views/users/*}) do
              resource_tests('users') +
              ['test/integration/microposts_interface_test.rb']
            end
          end

          # Returns the integration tests corresponding to the given resource.
          def integration_tests(resource = :all)
            if resource == :all
              Dir["test/integration/*"]
            else
              Dir["test/integration/#{resource}_*.rb"]
            end
          end

          # Returns the controller tests corresponding to the given resource.
          def controller_test(resource)
            "test/controllers/#{resource}_controller_test.rb"
          end

          # Returns all tests for the given resource.
          def resource_tests(resource)
            integration_tests(resource) << controller_test(resource)
          end
        #+END_SRC
******* Add spring/#.pid to .gitignore
* Chapter 4 Rails-flavored Ruby
*** Helpers                                                         :helpers:
    - provide functions not included in Rails
***** full_title                                                  :helpers:v:
      #+NAME: app/helpers/application_helper.rb
      #+BEGIN_SRC ruby
          module ApplicationHelper

          #Returns the full title on a per-page basis.
          def full_title(page_title = '')

            base_title = "Ruby on Rails Tutorial Sample App"
            if page_title.empty?
              base_title
            else
              page_title + " | " + base_title
            end
            
          end

          
        end
      #+END_SRC
***** <title><%= full_title(yield(:title)) %></title>
***  %w[A B C].map(&:downcase)
     == %w[A B C].map { |char| char.downcase }
*** p :name # Same output as 'puts :name.inspect'
    inspect method: returns a string with a literal 
    representation of the object it’s called on
*** 4.4 Ruby Classes
***** 4.4.5 A user class
******* code for example user
        #+NAME: example_user.rb
        #+BEGIN_SRC ruby
        
        #+END_SRC
